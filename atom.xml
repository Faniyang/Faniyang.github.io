<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Let it flow~</title>
  
  
  <link href="https://faniyang.github.io/atom.xml" rel="self"/>
  
  <link href="https://faniyang.github.io/"/>
  <updated>2025-10-01T02:30:09.797Z</updated>
  <id>https://faniyang.github.io/</id>
  
  <author>
    <name>Faniyang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Solana —— 环境搭建与基础命令</title>
    <link href="https://faniyang.github.io/2025/10/01/solana-install-and-cli/"/>
    <id>https://faniyang.github.io/2025/10/01/solana-install-and-cli/</id>
    <published>2025-10-01T07:17:14.000Z</published>
    <updated>2025-10-01T02:30:09.797Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;1-环境安装&quot;&gt;&lt;a href=&quot;#1-环境安装&quot; class=&quot;headerlink&quot; title=&quot;1. 环境安装&quot;&gt;&lt;/a&gt;1. 环境安装&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td</summary>
        
      
    
    
    
    
    <category term="Solana" scheme="https://faniyang.github.io/tags/Solana/"/>
    
  </entry>
  
  <entry>
    <title>Rust —— 生命周期</title>
    <link href="https://faniyang.github.io/2025/09/30/rust-lifetimes/"/>
    <id>https://faniyang.github.io/2025/09/30/rust-lifetimes/</id>
    <published>2025-09-30T03:29:17.000Z</published>
    <updated>2025-09-30T05:34:48.192Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;生命周期（Lifetime）是 Rust 中确保引用有效性的机制。每个引用都有生命周期，即引用保持有效的作用域。大多数情况下生命周期是隐式推断的，但在某些情况下需要显式标注。&lt;/p&gt;
&lt;h2 id=&quot;1-生命周期的作用&quot;&gt;&lt;a href=&quot;#1-生命周期的作用&quot;</summary>
        
      
    
    
    
    
    <category term="Rust" scheme="https://faniyang.github.io/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>Rust —— 特征</title>
    <link href="https://faniyang.github.io/2025/09/29/rust-traits/"/>
    <id>https://faniyang.github.io/2025/09/29/rust-traits/</id>
    <published>2025-09-29T03:28:55.000Z</published>
    <updated>2025-09-30T05:34:55.352Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;Trait 定义了类型可以共享的行为。可以使用 trait 以抽象的方式定义共享行为，使用 trait 约束指定泛型类型必须具有特定行为。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt; Trait</summary>
        
      
    
    
    
    
    <category term="Rust" scheme="https://faniyang.github.io/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>Rust —— 泛型</title>
    <link href="https://faniyang.github.io/2025/09/28/rust-generic-types/"/>
    <id>https://faniyang.github.io/2025/09/28/rust-generic-types/</id>
    <published>2025-09-28T03:28:14.000Z</published>
    <updated>2025-09-30T05:34:40.532Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;泛型允许我们用抽象的类型参数替代具体类型，从而编写可复用的代码。Rust 在编译时会进行&lt;strong&gt;单态化（Monomorphization）&lt;/strong&gt;，将泛型代码转换为具体类型的代码，因此使用泛型不会带来运行时性能损失。&lt;/p&gt;
&lt;h2</summary>
        
      
    
    
    
    
    <category term="Rust" scheme="https://faniyang.github.io/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>Rust —— 错误处理</title>
    <link href="https://faniyang.github.io/2025/09/27/rust-error-handling/"/>
    <id>https://faniyang.github.io/2025/09/27/rust-error-handling/</id>
    <published>2025-09-27T03:12:04.000Z</published>
    <updated>2025-09-30T05:34:13.500Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;Rust 将错误分为两大类：&lt;strong&gt;可恢复错误&lt;/strong&gt;和&lt;strong&gt;不可恢复错误&lt;/strong&gt;。可恢复错误用 &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; 处理，不可恢复错误用 &lt;code&gt;panic!&lt;/code&gt;</summary>
        
      
    
    
    
    
    <category term="Rust" scheme="https://faniyang.github.io/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>Rust —— 常见集合</title>
    <link href="https://faniyang.github.io/2025/09/26/rust-common-collections/"/>
    <id>https://faniyang.github.io/2025/09/26/rust-common-collections/</id>
    <published>2025-09-26T03:11:49.000Z</published>
    <updated>2025-09-30T05:33:57.767Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;Rust</summary>
        
      
    
    
    
    
    <category term="Rust" scheme="https://faniyang.github.io/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>Rust —— 枚举和模式匹配</title>
    <link href="https://faniyang.github.io/2025/09/25/rust-enums-and-pattern-matching/"/>
    <id>https://faniyang.github.io/2025/09/25/rust-enums-and-pattern-matching/</id>
    <published>2025-09-25T03:11:26.000Z</published>
    <updated>2025-09-30T05:33:35.865Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;枚举（Enum）允许我们通过列举所有可能的变体来定义一个类型。与结构体类似，枚举也可以包含数据和方法，但更适合表示”多选一”的情况。&lt;/p&gt;
&lt;h2 id=&quot;1-定义和使用枚举&quot;&gt;&lt;a href=&quot;#1-定义和使用枚举&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    
    <category term="Rust" scheme="https://faniyang.github.io/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>Rust —— 结构体</title>
    <link href="https://faniyang.github.io/2025/09/24/rust-structs/"/>
    <id>https://faniyang.github.io/2025/09/24/rust-structs/</id>
    <published>2025-09-24T02:19:13.000Z</published>
    <updated>2025-09-30T03:11:36.420Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;结构体（Struct）和元组类似，都可以包含不同类型的数据。但与元组不同的是，结构体中的每个字段都有命名，因此更加清晰、灵活。我们不需要依赖数据的顺序来访问值，而是通过字段名来访问。&lt;/p&gt;
&lt;h2 id=&quot;1-定义和实例化结构体&quot;&gt;&lt;a</summary>
        
      
    
    
    
    
    <category term="Rust" scheme="https://faniyang.github.io/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>Rust —— 所有权</title>
    <link href="https://faniyang.github.io/2025/09/23/rust-ownership/"/>
    <id>https://faniyang.github.io/2025/09/23/rust-ownership/</id>
    <published>2025-09-23T05:24:21.000Z</published>
    <updated>2025-09-30T03:12:11.100Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;Rust 最独特的特性之一就是 &lt;strong&gt;所有权（Ownership）&lt;/strong&gt;，它让 Rust 在没有垃圾回收器（GC）的情况下仍能保证内存安全。理解所有权的工作原理非常重要。&lt;/p&gt;
&lt;h2 id=&quot;1-所有权的基本概念&quot;&gt;&lt;a</summary>
        
      
    
    
    
    
    <category term="Rust" scheme="https://faniyang.github.io/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>Rust —— 流程控制</title>
    <link href="https://faniyang.github.io/2025/09/22/rust-control-flows/"/>
    <id>https://faniyang.github.io/2025/09/22/rust-control-flows/</id>
    <published>2025-09-22T05:14:07.000Z</published>
    <updated>2025-09-23T05:31:04.198Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;1-条件分支&quot;&gt;&lt;a href=&quot;#1-条件分支&quot; class=&quot;headerlink&quot; title=&quot;1. 条件分支&quot;&gt;&lt;/a&gt;1. 条件分支&lt;/h2&gt;&lt;h3 id=&quot;if-表达式&quot;&gt;&lt;a href=&quot;#if-表达式&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    
    <category term="Rust" scheme="https://faniyang.github.io/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>Rust —— 数据类型和函数</title>
    <link href="https://faniyang.github.io/2025/09/21/rust-datatype-and-functions/"/>
    <id>https://faniyang.github.io/2025/09/21/rust-datatype-and-functions/</id>
    <published>2025-09-21T14:39:25.000Z</published>
    <updated>2025-09-23T05:30:10.532Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;数据类型（Data-Type）&quot;&gt;&lt;a href=&quot;#数据类型（Data-Type）&quot; class=&quot;headerlink&quot; title=&quot;数据类型（Data Type）&quot;&gt;&lt;/a&gt;数据类型（Data Type）&lt;/h2&gt;&lt;p&gt;Rust</summary>
        
      
    
    
    
    
    <category term="Rust" scheme="https://faniyang.github.io/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>Rust —— 变量和可变性</title>
    <link href="https://faniyang.github.io/2025/09/20/rust-variables-and-mutability/"/>
    <id>https://faniyang.github.io/2025/09/20/rust-variables-and-mutability/</id>
    <published>2025-09-20T14:24:31.000Z</published>
    <updated>2025-09-22T00:03:15.432Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;1-可变与不可变变量&quot;&gt;&lt;a href=&quot;#1-可变与不可变变量&quot; class=&quot;headerlink&quot; title=&quot;1. 可变与不可变变量&quot;&gt;&lt;/a&gt;1.</summary>
        
      
    
    
    
    
    <category term="Rust" scheme="https://faniyang.github.io/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>Rust —— Hello, World!</title>
    <link href="https://faniyang.github.io/2025/09/19/rust-hello-world/"/>
    <id>https://faniyang.github.io/2025/09/19/rust-hello-world/</id>
    <published>2025-09-19T14:18:43.000Z</published>
    <updated>2025-09-22T00:02:58.652Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;Hello-World&quot;&gt;&lt;a href=&quot;#Hello-World&quot; class=&quot;headerlink&quot; title=&quot;Hello World!&quot;&gt;&lt;/a&gt;Hello</summary>
        
      
    
    
    
    
    <category term="Rust" scheme="https://faniyang.github.io/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>Layer2 —— Op Stack 组件日志管理</title>
    <link href="https://faniyang.github.io/2025/09/18/log-mgmt-part4/"/>
    <id>https://faniyang.github.io/2025/09/18/log-mgmt-part4/</id>
    <published>2025-09-18T09:30:42.000Z</published>
    <updated>2025-09-20T15:31:20.557Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;Layer 2 节点的各项组件（如</summary>
        
      
    
    
    
    
    <category term="Layer2" scheme="https://faniyang.github.io/tags/Layer2/"/>
    
    <category term="Journald" scheme="https://faniyang.github.io/tags/Journald/"/>
    
  </entry>
  
  <entry>
    <title>Layer2 —— Systemd 自动化管理 OP Stack 组件</title>
    <link href="https://faniyang.github.io/2025/09/17/systemd-auto-mgmt-part3/"/>
    <id>https://faniyang.github.io/2025/09/17/systemd-auto-mgmt-part3/</id>
    <published>2025-09-17T10:50:17.000Z</published>
    <updated>2025-09-20T15:28:31.090Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;在部署和运行 Optimism 的过程中，手动启动各个组件既繁琐又容易出错。本文将详细介绍如何使用 systemd 服务来自动化管理 OP</summary>
        
      
    
    
    
    
    <category term="Layer2" scheme="https://faniyang.github.io/tags/Layer2/"/>
    
    <category term="Systemd" scheme="https://faniyang.github.io/tags/Systemd/"/>
    
  </entry>
  
  <entry>
    <title>Layer2 —— Blockscout 部署指南</title>
    <link href="https://faniyang.github.io/2025/09/16/blockscout-deployment-part2/"/>
    <id>https://faniyang.github.io/2025/09/16/blockscout-deployment-part2/</id>
    <published>2025-09-15T16:23:18.000Z</published>
    <updated>2025-09-28T01:09:27.486Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;本指南详细介绍了如何为搭建的 Layer2 区块链网络部署 Blockscout 区块浏览器。Blockscout</summary>
        
      
    
    
    
    
    <category term="Blockscout" scheme="https://faniyang.github.io/tags/Blockscout/"/>
    
    <category term="Layer2" scheme="https://faniyang.github.io/tags/Layer2/"/>
    
  </entry>
  
  <entry>
    <title>Layer2 —— OP Stack 部署指南</title>
    <link href="https://faniyang.github.io/2025/09/15/op-stack-deployment-part1/"/>
    <id>https://faniyang.github.io/2025/09/15/op-stack-deployment-part1/</id>
    <published>2025-09-15T09:54:48.000Z</published>
    <updated>2025-09-18T15:45:57.132Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;OP Stack 是 Optimism 开发的模块化区块链技术栈，允许开发者轻松创建自己的 Layer2 网络。本指南提供了在</summary>
        
      
    
    
    
    
    <category term="Layer2" scheme="https://faniyang.github.io/tags/Layer2/"/>
    
    <category term="OPStack" scheme="https://faniyang.github.io/tags/OPStack/"/>
    
  </entry>
  
  <entry>
    <title>慢练勤修，别急放松 | 道家武术馆一月清修</title>
    <link href="https://faniyang.github.io/2025/02/22/taichi-28/"/>
    <id>https://faniyang.github.io/2025/02/22/taichi-28/</id>
    <published>2025-02-22T07:01:09.000Z</published>
    <updated>2025-09-15T13:20:17.755Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;一月上旬读了三本书 ——《36 万遍感恩的奇迹》、《清醒地活》、《内在工程》，这三本书中都有部分篇幅讲述了阴阳哲学，让我对道家文化产生了浓厚兴趣，再次看到之前觉得平平无奇的太极图的第一反应竟然是 —— &lt;em&gt;It is</summary>
        
      
    
    
    
    
    <category term="Flow" scheme="https://faniyang.github.io/tags/Flow/"/>
    
  </entry>
  
  <entry>
    <title>神圣的静默 | 武夷山东山禅林十日内观</title>
    <link href="https://faniyang.github.io/2024/12/12/vipassana/"/>
    <id>https://faniyang.github.io/2024/12/12/vipassana/</id>
    <published>2024-12-12T15:52:54.000Z</published>
    <updated>2025-09-15T13:20:22.565Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在山上度过了十天禁言、与外界信息隔离的出家生活，从观呼吸开始以慈悲观结束。去之前从没想过内观禅修那么难，难在深入敏锐地专注，难在全然平等地接受。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;关于做&quot;&gt;&lt;a href=&quot;#关于做&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    
    <category term="Flow" scheme="https://faniyang.github.io/tags/Flow/"/>
    
  </entry>
  
  <entry>
    <title>25 Today, Halfway to 50 🤭</title>
    <link href="https://faniyang.github.io/2024/01/15/happy-birthday/"/>
    <id>https://faniyang.github.io/2024/01/15/happy-birthday/</id>
    <published>2024-01-15T13:33:30.000Z</published>
    <updated>2025-09-15T13:20:08.948Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;img</summary>
        
      
    
    
    
    
    <category term="Flow" scheme="https://faniyang.github.io/tags/Flow/"/>
    
  </entry>
  
</feed>
